#pragma once

#include <random>

#define randomZeroToOne ((double) rand() / (RAND_MAX))

static inline float color_vib(float c) {
    float p = (randomZeroToOne - 0.5) * 0.5;
    return std::clamp(p > 0 ? c + (1 - c) * p : c - c * p, 0.f, 1.f);
}

struct Color {
    float r, g, b;

    void vibrate() {
        r = color_vib(r);
        g = color_vib(g);
        b = color_vib(b);
    }
};

constexpr Color WHITE { 1.f, 1.f, 1.f };
constexpr Color DEAD_COLOR { 0.5f, 0.5f, 0.5f };
constexpr Color VIRUS_COLOR { 0.2196078431372549f, 0.8627450980392157f, 0.7607843137254902f };
constexpr Color ROCK_COLOR1 { 0.7019607843137254f, 0.8588235294117647f, 1.f };
constexpr Color ROCK_COLOR2 { 1.f, 0.8823529411764706f, 0.7411764705882353f };

constexpr int COLOR_COUNT = 12;

constexpr Color CELL_COLORS[COLOR_COUNT] = {
    { 0, 1, 0.5803921568627451 },
    { 0, 0.9647058823529412, 0.15294117647058825 },
    { 1, 0.26666666666666666, 0.2627450980392157 },
    { 0, 0.9411764705882353, 0.9176470588235294 },
    { 1, 0, 0.3843137254901961 },
    { 0, 0.6627450980392157, 1 },
    { 1, 0.8862745098039215, 0 },
    { 0.5803921568627451, 0, 1 },
    { 0.7686274509803922, 0.01568627450980392, 0.3058823529411765 },
    { 0.7529411764705882, 1, 0.22745098039215686 },
    { 1, 0.41568627450980394, 0.8941176470588236 },
    { 1, 0.5568627450980392, 0 }
};

constexpr Color EJECTS_COLORS[COLOR_COUNT] = {
    { 0.5, 1, 0.7901960784313725 },
    { 0.5, 0.9823529411764705, 0.5764705882352941 },
    { 1, 0.6333333333333333, 0.6313725490196078 },
    { 0.5, 0.9705882352941176, 0.9588235294117647 },
    { 1, 0.5, 0.692156862745098 },
    { 0.5, 0.8313725490196079, 1 },
    { 1, 0.9431372549019608, 0.5 },
    { 0.7901960784313725, 0.5, 1 },
    { 0.884313725490196, 0.5078431372549019, 0.6529411764705882 },
    { 0.8764705882352941, 1, 0.6137254901960785 },
    { 1, 0.707843137254902, 0.9470588235294117 },
    { 1, 0.7784313725490196, 0.5 }
};
